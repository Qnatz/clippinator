- name: "General"
  description: "An empty project"
  architecture: |+
    app.py
      >from flask import Flask, render_template, request, redirect, url_for
      >app = Flask(__name__)
      >if __name__ == "__main__":
      >    from views import views_blueprint
      >    app.register_blueprint(views_blueprint)
      >    app.run(debug=True)

    views.py
      >from flask import Blueprint, render_template, request, redirect, url_for
      >from flask_login import login_required, current_user
      >from models import User, Tweet, Follower
      >views_blueprint = Blueprint("views", __name__)
      >@views_blueprint.route("/")
      >def index() -> str:    # renders index.html template
      >@views_blueprint.route("/register", methods=["GET", "POST"])
      >def register() -> str:   # register.html on get, create a new user and redir to / on post
      >@views_blueprint.route("/login", methods=["GET", "POST"])
      >def login() -> str:   # login.html on get, logging in + redir on post
      >@views_blueprint.route("/tweet", methods=["POST"])
      >def new_tweet() -> str:    # Create a new twit in the database, redirect to its page
      >@views_blueprint.route("/tweet/<int:tweet_id")
      >def tweet() -> str:    # view a tweet using tweet.html
      >@views_blueprint.route("/follow/<int:user_id>")
      >def follow(user_id: str) -> str:    # follow a user
      >@views_blueprint.route("/like/<int:tweet>")
      >def like(tweet_id: str) -> str:    # toggle like on a tweet and return the new state

    models.py
      >from flask_sqlalchemy import SQLAlchemy
      >from app import app
      >db = SQLAlchemy(app)
      >class User(db.Model):
      >    id = db.Column(db.Integer, primary_key=True)
      >    username = db.Column(db.String(80), unique=True, nullable=False)
      >    password = db.Column(db.String(120), nullable=False)
      >class Tweet(db.Model):
      >    id = db.Column(db.Integer, primary_key=True)
      >    content = db.Column(db.String(280), nullable=False)
      >    user_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=False)
      >    timestamp = db.Column(db.DateTime, nullable=False)
      >class Follower(db.Model):
      >    id = db.Column(db.Integer, primary_key=True)
      >    user_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=False)
      >    follower_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=False)
      >with app.app_context():   # this line is needed always when creating a database in flask+sqlalchemy
      >    db.create_all()

    templates/
      # Design notes: the background color is white, the overall design is modern and minimalistic, rounded corners, animations, the top header bar is dark blue, the primary color is blue
      base.html    # Base template with common elements like loading Tailwind for modern design
        > Loads Tailwind CSS, static/main.css, and static/main.js (using url_for), fontawesome icons
        > Has the top header bar with navigation (login, profile [depending on the current user], etc.), some basic (modern) design of the base of the pages
        > Has the content block which is centered
      index.html   # Home page with a list of tweets from followed users  (takes in `tweets`, `authors` (authors for each tweet), `current_user` (of type User))
        > extends base.html, overwrites the content block
        > uses the tweets variable, the user variable
        > shows the field for a new twit and the list of twits from followed users (you can click on the twit or their authors)
      register.html   # User registration form, has a POST form to /register
        > extends base.html
        > contains a POST form to register
        > a rounded box with a border, inside a form for name, username, password and a blue rounded submit button
        > the form has a POST method and action="/register", has fields "name", "username", "password"
      login.html   # User login form with a POST form to /login with login and password
        > extends base.html
        > contains a POST form to login (redirects to /)
        > a rounded box with a border, inside a form for username, password and a blue rounded submit button
        > the form has a POST method and action="/login", has fields "username", "password"
      tweet.html   # Page for viewing a twit (takes in `content`, `author` (of type User), `timestamp`, `likes`, `liked` (bool), `id`)
        > Has the twit (inside a rounded box with grey border) with the author on top, the content, like button below (fontawesome icon)
        > you can click on the author and go to /user/...
        > you can click on the like button and it will toggle the like by calling the /like/... route in js
      user.html   # User profile page with a list of their tweets and follow/unfollow buttons which use JS to call the routes, extends base.html. Takes `user`, `current_user`, `is_following` (bool)
        > uses [un]follow(user_id) js function to call the api
        > you can go to different tweets

    static/
      css/
        main.css   # Custom CSS classes, if needed
      js/
        main.js    # JavaScript file for any dynamic frontend functionality like follow/unfollow
          > function follow(user_id: Integer)   # calls /follow/<user_id> using fetch
          > function unfollow(user_id: Integer) # calls /unfollow/<user_id> using fetch
          > function like(tweet_id: Integer) # toggle like, calls /like/<tweet_id> using fetch
    tests/
      test_integration.py
        >import unittest
        >from app import app
        >from models import db, User
        >class TestIntegration(unittest.TestCase):
        >    def setUp(self):
        >        self.app = app.test_client()
        >        self.db = db
        >    def test_user_registration_and_login(self):
        >    def test_tweet_creation_and_retrieval(self):
        >    def test_following_and_unfollowing_users(self):
        >    def test_liking_and_unliking_tweets(self):
- name: "Fastapi+Next.js"
  description: "An application with a backend and a frontend, Fastapi and Next.js (+Tailwind)"
  setup: |+
    npx create-next-app --example "https://github.com/digitros/nextjs-fastapi" {project_name}
    cd {project_name}
    yarn install
    cd api
    pip install -r requirements.txt --break-system-packages
    sed -i 's/"fastapi-dev": "pip3 install -r requirements.txt && python3 -m uvicorn api.index:app --reload"/"fastapi-dev": "python3 -m uvicorn api.index:app --reload"/' package.json
  ci:
    run: "yarn dev"
    lint: "yarn lint && flake8 --select=E,F --ignore=E302 --exclude=venv,tests --max-line-length=120 --count --statistics --show-source --exit-zero"
  memories:
    - The frontend runs on localhost:3000, the Fastapi backend on localhost:8000.
    - The frontend is served from the /app folder, the backend from the /api folder.
    - The backend can be started using `yarn fastapi-dev`, the backend can be started using `yarn next-dev`
    - You should periodically run them while developing to check for errors. In the case of frontend, you should make a request to it and check the logs
    - In the frontend, components which require `useState` or `useRouter` or `useEffect` should always be marked with `'use client'` as the first line
  info: |+
    The Python/FastAPI server is mapped into to Next.js app under /api/.
    This is implemented using next.config.js rewrites to map any request to /api/:path* to the FastAPI API, which is hosted in the /api folder.
    On localhost, the rewrite will be made to the 127.0.0.1:8000 port, which is where the FastAPI server is running.
    The frontend runs on localhost:3000.
    Here is the project structure:
      app:
        favicon.ico
        globals.css
          19|body {
        layout.tsx
        page.tsx
      next-env.d.ts
      tsconfig.json
      requirements.txt
      package.json
        13|  "dependencies": {  // node, react, typescript, tailwindcss
      package-lock.json
      postcss.config.js
        2|  plugins: {
        3|    tailwindcss: {},
        4|    autoprefixer: {},
      next.config.js
      yarn.lock
      public:
        vercel.svg
        next.svg
      api:
        index.py
          3|app = FastAPI()
          6|def hello_world():
      README.md
      tailwind.config.js
        8|  theme: {
        9|    extend: {
        10|      backgroundImage: {
        11|        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        12|        'gradient-conic':
  architecture: |+
    api/
      index.py
        >from fastapi import FastAPI
        >from .routers.api_router import api_router
        >#auth_router
        >app = FastAPI()
        >app.include_router(api_router, prefix="/api/v1")
        >app.include_router(auth_router, prefix="/api/v1/auth")

      routers/
        __init__.py
        api_router.py
          >from fastapi import APIRouter, Depends
          >from ..models import User, Post, Comment, Subreddit, Vote
          >from .auth_router import manager
          >router = APIRouter()
          >@router.post("/post")
          >def create_post(post: schemas.PostCreate, current_user: User = Depends(manager), db: Session = Depends(get_db)):
          >@router.get("/post/{post_id}")
          >def get_post(post_id: str, db: Session = Depends(get_db)):
          >@router.post("/comment/{post_id}")
          >def comment_on_post(comment: schemas.CommentCreate, current_user: User = Depends(manager), db: Session = Depends(get_db)):
          >@router.post("/subreddit")
          >def create_subreddit(subreddit: schemas.SubredditCreate, current_user: User = Depends(manager), db: Session = Depends(get_db)):
          >@router.get("/subreddit/{subreddit_id}")
          >def get_subreddit(subreddit_id: str, db: Session = Depends(get_db)):
          >@router.post("/subscribe/{subreddit_id}")
          >def subscribe(subreddit_id: str, current_user: User = Depends(manager), db: Session = Depends(get_db)):
          >@router.delete("/unsubscribe/{subreddit_id}")
          >def unsubscribe(subreddit_id: str, current_user: User = Depends(manager), db: Session = Depends(get_db)):
          >@router.post("/upvote/{post_id}")
          >def upvote(post_id: str, current_user: User = Depends(manager), db: Session = Depends(get_db)):
          >@router.post("/downvote/{post_id}")
          >def downvote(post_id: str, current_user: User = Depends(manager), db: Session = Depends(get_db)):

        auth_router.py
          >from fastapi_login import LoginManager
          >from fastapi.security import OAuth2PasswordRequestForm
          >from jose import JWTError, jwt
          >from .. import schemas, crud
          >SECRET_KEY = "YOUR_SECRET_KEY"
          >ALGORITHM = "HS256"
          >manager = LoginManager(SECRET_KEY, '/auth/token')
          >@manager.user_loader
          >def load_user(email: str):  # The function to retrieve the user should be here
          >@router.post("/auth/token")
          >def login(data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)): # The login function is here
          >@router.post("/auth/register")
          >def register(user: schemas.UserCreate, db: Session = Depends(get_db)): # User registration is here
          >@router.get("/me")
          >def get_profile(current_user: User = Depends(manager)):

      models/
        __init__.py
        models.py
          >from sqlalchemy import Column, Integer, String, Boolean
          >from sqlalchemy.orm import relationship, declarative_base
          >from werkzeug.security import generate_password_hash
          >Base = declarative_base()
          >class UserBase(BaseModel):
               # a structure with username and password
          >class UserInDB(UserBase):
                   # id, class Config with orm_mode
          >class User(Base):
          >    id = Column(Integer, primary_key=True, index=True)
          >    username = Column(String, unique=True, index=True)
          >    password = Column(String)
          >    def set_password(self, password):
          >        self.password = generate_password_hash(password)
          ># PostBase, PostInDB
          >class Post(Base):
          >    id = Column(Integer, primary_key=True, index=True)
          >    content = Column(String, nullable=False)
          >    title = Column(String, nullable=False)
          >    user_id = Column(Integer, ForeignKey("users.id"))
          >    subreddit_id = Column(Integer, ForeignKey("subreddits.id"))
          >    user = relationship("User", back_populates="posts")
          >    subreddit = relationship("Subreddit", back_populates="posts")
          >    comments = relationship("Comment", back_populates="post")
          ># CommentBase, CommentInDB
          >class Comment(Base):
          >    id = Column(Integer, primary_key=True, index=True)
          >    content = Column(String, nullable=False)
          >    user_id = Column(Integer, ForeignKey("users.id"))
          >    post_id = Column(Integer, ForeignKey("posts.id"))
          >    user = relationship("User", back_populates="comments")
          >    post = relationship("Post", back_populates="comments")
          ># SubredditBase, SubredditInDB
          >class Subreddit(Base):
          >    id = Column(Integer, primary_key=True, index=True)
          >    name = Column(String, unique=True, index=True)
          >    description = Column(String)
          >    user_id = Column(Integer, ForeignKey("users.id"))
          >    user = relationship("User", back_populates="subreddits")
          >    posts = relationship("Post", back_populates="subreddit")
          ># VoteBase, VoteInDB
          >class Vote(Base):
          >    user_id = Column(Integer, ForeignKey("users.id"), primary_key=True)
          >    post_id = Column(Integer, ForeignKey("posts.id"), primary_key=True)
          >    user = relationship("User", back_populates="votes")
          >    post = relationship("Post", back_populates="votes")
          >    is_upvote = Column(Boolean)

      schemas.py
        >from pydantic import BaseModel
        >class UserBase(BaseModel):
        >    username: str
        >class UserCreate(UserBase):
        >    password: str
        >class PostCreate(BaseModel):
        >    title: str
        >    content: str
        >class CommentCreate(BaseModel):
        >    content: str
        >class SubredditCreate(BaseModel):
        >    name: str
        >    description: str

      crud.py
        >from sqlalchemy.orm import Session
        >from . import models, schemas
        >def get_user(db: Session, user_id: int):
        >def get_user_by_username(db: Session, username: str):
        >def create_user(db: Session, user: schemas.UserCreate):
    
      database.py
        >SQLALCHEMY_DATABASE_URL =
        >engine = create_engine(..)
        >SessionLocal = sessionmaker(..)
        >Base = declarative_base()
        >def get_db():

    app/    # Overall, the color theme is blue (primary in tailwind) + white. a lot of elements are rounded boxes with 1rem border radius.
      page.tsx    # Main page with feed of subscribed subreddits
        >import { useSelector } from 'react-redux'
        >import Layout from './components/Layout'
        >import { BrowserRouter as Router, Route, Switch } from 'react-router-dom'
        >import PostPage from './post/[id]'
        >import SubredditPage from './subreddit/[id]'
        >import LoginPage from './login'
        >import RegisterPage from './register'
        >export default function Home() { 
        >  <Layout>
        >    <Router>
        >      <Switch>
        >        <Route path="/post/:id" component={PostPage} />
        >        <Route path="/subreddit/:id" component={SubredditPage} />
        >        <Route path="/login" component={LoginPage} />
        >        <Route path="/register" component={RegisterPage} />
        >      </Switch>
        >    </Router>
        >  </Layout>
        >}
      post/[id].tsx    # Page for viewing, commenting on, upvoting and downvoting a post
          >import Layout from 'components/Layout'
          >export default function PostPage() { 
          >  /* Use useRouter to fetch and display post based on post id */
          >  /* Display post with Post component */
          >  /* Display comments with Comment component in a nested list */
          >}

      subreddit/[id].tsx   # Page for viewing subreddit's posts, subscribe to subreddit
        >import Layout from './components/Layout'
        >export default function SubredditPage() { 
        >  /* Use useRouter to fetch and display subreddit's posts, handle subscription */
        >  /* Display subreddit's posts with Post component in a scrollable list */
        >  /* Display subscription button with SubscriptionButton component */
        >}

      login.tsx  # Page for logging in
        >import Layout from './components/Layout'
        >import LoginForm from './components/LoginForm'
        >export default function LoginPage() { 
        >  /* Use Layout component */
        >  /* Include LoginForm component for users to login */
        >}

      register.tsx  # Page for registering
        >import Layout from './components/Layout'
        >import RegisterForm from './components/RegisterForm'
        >export default function RegisterPage() { 
        >  /* Use Layout component */
        >  /* Include RegisterForm component for users to register */
        >}

      components/
        Layout.tsx  # Common layout component for consistency
          >export default function Layout({ children }) { 
          >  /* Include Header component for navigation */
          >  /* Wrap children with main tag for main content */
          >}

        Header.tsx  # Common header component for navigation
          >import Link from 'next/link'
          >export default function Header() { 
          >  /* Include links to home, login, register pages. Logo on the left, user's profile on the right */
          >}

        LoginForm.tsx  # Login form component
          >export default function LoginForm() { 
          >  /* POST form to /login with username and password */
          >  /* If successful, redirect to home page */
          >}

        RegisterForm.tsx  # Registration form component
          >export default function RegisterForm() { 
          >  /* POST form to /register with username and password */
          >  /* If successful, redirect to home page */
          >}

        Post.tsx  # Post component for displaying a single post
          >export default function Post({ post }) { 
          >  /* Display post content */
          >  /* Include UpvoteButton and DownvoteButton components to vote on the post */
          >}

        Comment.tsx  # Comment component for displaying a single comment
          >export default function Comment({ comment }) { 
          >  /* Display comment content and author */
          >}

        UpvoteButton.tsx  # Upvote button component
          >export default function UpvoteButton({ postId }) { 
          >  /* POST to /upvote/{postId} when clicked */
          >  /* If successful, update vote count */
          >}

        DownvoteButton.tsx  # Downvote button component
          >export default function DownvoteButton({ postId }) { 
          >  /* POST to /downvote/{postId} when clicked */
          >  /* If successful, update vote count */
          >}

        SubscriptionButton.tsx  # Subscription button component
          >export default function SubscriptionButton({ subredditId }) { 
          >  /* POST to /subscribe/{subredditId} when clicked */
          >  /* If successful, update subscription status */
          >}

      styles/
        index.css   # Tailwind CSS styles for the application
          >@import 'tailwindcss/base';
          >@import 'tailwindcss/components';
          >@import 'tailwindcss/utilities';


- name: "Django"
  setup: |+
    django-admin startproject \
      --template=https://github.com/jpadilla/django-project-template/archive/master.zip \
      --name=Procfile \
      --extension=py,md,env \
      {project_name}
    cd {project_name}
    pipenv install --dev
    cp example.env .env
  description: "A Django application with some basic setups"
  info: |+
    A Django application with some basic setups.
    Uses Pipenv for dependency management.
    Features:
      Django 1.9
      Development, Staging and Production settings with django-configurations.
      Get value insight and debug information while on Development with django-debug-toolbar.
      Load environment variables from .env with django-dotenv.
      Collection of custom extensions with django-extensions.
      HTTPS and other security related settings on Staging and Production.
      Procfile for running gunicorn with New Relic's Python agent.
      PostgreSQL database support with psycopg2.
    Project structure:
      example.env
      project_name:
        __init__.py
        wsgi.py
          12|configuration = os.getenv('ENVIRONMENT', 'development').title()
          18|application = get_wsgi_application()
        users:
          models.py
            4|class User(AbstractUser):
                 ... define user model here
          __init__.py
          admin.py
          migrations:
            __init__.py
            0001_initial.py
              11|class Migration(migrations.Migration):
              13|    initial = True
              15|    dependencies = [
              19|    operations = [
            asgi.py
              13|configuration = os.getenv('ENVIRONMENT', 'development').title()
              21|application = get_asgi_application()
            settings.py
              16|class Common(Configuration):
              123|class Development(Common):
              140|class Staging(Common):
              158|class Production(Staging):
            urls.py
              5|urlpatterns = [
              11|    urlpatterns = [
          Pipfile.lock
          Pipfile
          Procfile
          manage.py
            7|def main():
          README.md
#- name: "Preact frontend"
#  setup: |+
#    git clone git@github.com:borodutch/frontend-starter.git {project_name}
#    cd {project_name}
#    yarn install
#    # yarn start to run
#  description: "A Preact frontend application with TS, yarn, jotai, vite, tailwind"
#  info: |+
#    A Preact frontend application with yarn, jotai, vite, tailwind
#    Features:
#      State management with jotai
#      preact under the hood with preact/compat makes it compatible with virtually any react library but still makes it faster
#      Full TypeScript support — no dangling types
#      vite packager and devtools make building and development lightning fast
#      tailwind-css built-in with 'daisyui'
#      prettier and eslint configured, enabled and formatting your code on save
#      List of recommended extensions for VSCode
#      It is important to keep the bundle small, so a stats.html file is generated on yarn build to visually show you the bundle size
#    Project structure:
#      tsconfig.json
#      package.json
#        5|  "scripts": {
#          "start": "vite",
#          "build": "cross-env NODE_ENV=production tsc && vite build",
#          "pretty": "prettier --check src",
#          "lint": "yarn pretty && eslint --max-warnings 0 --ext ts,tsx,json src",
#          "preview": "yarn build && yarn vite preview"
#      index.html
#        6|    <title>Frontend starter preact</title>
#        11|    <div id="root" />
#      vite.config.ts
#      src:
#        index.css
#            5|body {
#                     react-app-env.d.ts
#        helpers:
#          getUserCount.ts
#          2|  const data = await (await fetch('https://stats.borodutch.com/count')).json()
#          formatNumber.ts
#        index.tsx
#        atoms:
#          userCount.ts
#        models:
#          ChildrenProp.ts
#            3|export default interface ChildrenProp {
#            4|  children: ComponentChildren
#          ... The rest of the models should be added here
#        components:
#          UserCount.tsx
#          ... The rest of the components should be added here
#        App.tsx
#      postcss.config.js
#      yarn.lock
#      public:
#        robots.txt
#      README.md
#      tailwind.config.js
#        4|  plugins: [require('@tailwindcss/typography'), require('daisyui')],
#
#    Use `yarn start` to run, `yarn lint` to lint, `yarn pretty` to prettify code
#
#- name: "Fastapi"
#  description: "A Fastapi python API with tests and everything"
#  setup: |+
#    git clone git@github.com:rochacbruno/fastapi-project-template.git {project_name}
#    cd {project_name}
#    find . -type f -exec sed -i 's/project_name/{project_name}/g' {br} \;
#    mv project_name {project_name}
#    find . -type f -exec sed -i 's/a_flask_test/{project_name}/g' {br} \;
#    find . -type f -exec sed -i 's/a-flask-test/{project_name}/g' {br} \;
#    make switch-to-poetry
#    poetry install
#  info: |+
#    A template with postgres and fastapi.
#    Project structure:
#      ├── Containerfile            # The file to build a container using buildah or docker
#      ├── CONTRIBUTING.md          # Onboarding instructions for new contributors
#      ├── docs                     # Documentation site (add more .md files here)
#      │ └── index.md             # The index page for the docs site
#      ├── .gitignore               # A list of files to ignore when pushing to Github
#      ├── HISTORY.md               # Auto generated list of changes to the project
#      ├── LICENSE                  # The license for the project
#      ├── Makefile                 # A collection of utilities to manage the project
#      ├── MANIFEST.in              # A list of files to include in a package
#      ├── mkdocs.yml               # Configuration for documentation site
#      ├── project_name             # The main python package for the project
#      │ ├── base.py              # The base module for the project
#      │ ├── __init__.py          # This tells Python that this is a package
#      │ ├── __main__.py          # The entry point for the project
#      │ └── VERSION              # The version for the project is kept in a static file
#      ├── README.md                # The main readme for the project
#      ├── setup.py                 # The setup.py file for installing and packaging the project
#      ├── requirements.txt         # An empty file to hold the requirements for the project
#      ├── requirements-test.txt    # List of requirements for testing and devlopment
#      ├── setup.py                 # The setup.py file for installing and packaging the project
#      └── tests                    # Unit tests for the project (add mote tests files here)
#          ├── conftest.py          # Configuration, hooks and fixtures for pytest
#          ├── __init__.py          # This tells Python that this is a test package
#          └── test_base.py         # The base test case for the project
#    Scripts:
#    ❯ make
#      Usage: make <target>
#
#      Targets:
#      help:             ## Show the help.
#      install:          ## Install the project in dev mode.
#      fmt:              ## Format code using black & isort.
#      lint:             ## Run pep8, black, mypy linters.
#      test: lint        ## Run tests and generate coverage report.
#      watch:            ## Run tests on every change.
#      clean:            ## Clean unused files.
#      virtualenv:       ## Create a virtual environment.
#      release:          ## Create a new tag for release.
#      docs:             ## Build the documentation.
#      switch-to-poetry: ## Switch to poetry package manager.
#      init:             ## Initialize the project based on an application template.
